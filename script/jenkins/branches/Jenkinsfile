pipeline {
  agent any

  stages {
    stage('ci') {
      parallel {

        stage('lint') {
          steps {
            sh '''#!/bin/bash
            export PATH=$PATH:$CONDAPATH
            source activate petals_env
            rm -f pylint.log
            #pylint -ry climada_petals | tee pylint.log
            '''

            discoverGitReferenceBuild referenceJob: 'petals_branches/develop'
            recordIssues tools: [pyLint(pattern: 'pylint.log')]
          }
        }

        stage('unit_test') {
          steps {
            sh '''#!/bin/bash
            export PATH=$PATH:$CONDAPATH
            source activate petals_env
            rm -rf tests_xml/
            rm -rf coverage/

            CORENV=~/jobs/petals_branches/core_env
            BRANCH=`git name-rev --name-only HEAD | cut -f 3- -d /`
            echo $CORENV/$BRANCH
            if [ -f $CORENV/$BRANCH ]; then
              python -m venv --system-site-packages tvenv
              source tvenv/bin/activate

              pip install -e `cat $CORENV/$BRANCH`
            fi

            #make unit_test

            if [ -f $CORENV/$BRANCH ]; then
              deactivate
              #rm -r tvenv
            fi
            '''
          }
        }

      }
    }
  }

  post {
    always {
      junit 'tests_xml/*.xml'
      cobertura coberturaReportFile: 'coverage.xml'
    }
  }
}
